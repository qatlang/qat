#ifndef QAT_AST_NODE_TYPE_HPP
#define QAT_AST_NODE_TYPE_HPP

namespace qat::ast {

enum class NodeType {
  lib,
  block,
  Break,
  bringEntities,
  bringBitwidths,
  bringPaths,
  Continue,
  holder,
  typeDefinition,
  constructorCall,
  functionPrototype,
  functionDefinition,
  memberPrototype,
  memberDefinition,
  convertorPrototype,
  convertorDefinition,
  constructorPrototype,
  constructorDefinition,
  destructorDefinition,
  operatorPrototype,
  operatorDefinition,
  localDeclaration,
  globalDeclaration,
  booleanLiteral,
  integerLiteral,
  unsignedLiteral,
  customIntegerLiteral,
  floatLiteral,
  stringLiteral,
  saySentence,
  ifElse,
  giveSentence,
  defineCoreType,
  closeBox,
  reassignment,
  entity,
  genericEntity,
  plainInitialiser,
  prerunPlainInitialiser,
  self,
  selfMember,
  selfMemberFunction,
  toConversion,
  unaryExpression,
  ternaryExpression,
  functionCall,
  binaryExpression,
  heapGet,
  heapPut,
  heapGrow,
  memberFunctionCall,
  prerunMemberFunctionCall,
  memberAccess,
  sizeOf,
  sizeOfType,
  memberIndexAccess,
  expressionSentence,
  loopNormal,
  loopTimes,
  loopWhile,
  loopOver,
  loopIndex,
  multithread,
  multithreadGive,
  atomicAssignedExpression,
  nullPointer,
  radixLiteral,
  customFloatLiteral,
  box,
  tupleValue,
  prerunArrayLiteral,
  arrayLiteral,
  defineMixType,
  mixTypeInitialiser,
  match,
  defineChoiceType,
  dereference,
  Default,
  newAlias,
  moveExpression,
  typeChecker,
  Not,
  copyExpression,
  Await,
  none,
  modInfo,
  defineRegion,
  prerunEntity,
  prerunDefault,
  isExpression,
  okExpression,
  negative,
  prerunNegative,
  typeWrap,
  prerunMemberAccess,
  memberInit,
  cast,
  spawn,
};

} // namespace qat::ast

#endif
