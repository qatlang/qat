#ifndef QAT_LEXER_TOKEN_TYPE_HPP
#define QAT_LEXER_TOKEN_TYPE_HPP

namespace qat::lexer {

enum class TokenType {
  null  = -1,
  FALSE = 0,
  TRUE  = 1,
  startOfFile,
  give,
  Public,
  stop,
  voidType,
  pointerType,
  multiPointerType,
  referenceType,
  unsignedIntegerType,
  integerType,
  floatType,
  stringSliceType,
  bring,
  from,
  to,
  child,
  external,
  Type,
  identifier,
  parenthesisOpen,
  parenthesisClose,
  curlybraceOpen,
  curlybraceClose,
  bracketOpen,
  bracketClose,
  colon,
  For,
  constant,
  Static,
  Default,
  New,
  assignment,
  associatedAssignment,
  separator,
  integerLiteral,
  floatLiteral,
  StringLiteral,
  say,
  as,
  self,
  lib,
  box,
  endOfFile,
  packed,
  var,
  obtainPointer,
  givenTypeSeparator,
  Operator,
  binaryOperator,
  assignedBinaryOperator,
  If,
  Else,
  heap,
  loop,
  While,
  over,
  unaryOperator,
  comment,
  altArrow,
  bitwiseOr,
  bitwiseAnd,
  bitwiseNot,
  genericTypeStart,
  genericTypeEnd,
  Await,
  semiColon,
  isNullPointer,
  isNotNullPointer,
  assignToNullPointer,
  assignToNonNullPointer,
  super,
  variadic,
  Break,
  Continue,
  own,
  disown,
  end,
  mix,
  typeSeparator,
  match,
  copy,
  move,
  choice,
  future,
  maybe,
  none,
  meta,
  region,
  range,
  is,
  cType,
  result,
  pre,
  Not,
  exclamation,
  any,
  ok,
  selfWord,
  where,
  Do,
  questionMark
};

} // namespace qat::lexer

#endif